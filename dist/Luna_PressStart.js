//=============================================================================
// Luna_PressStart.js
//=============================================================================
//=============================================================================
// Build Date: 2020-09-12 10:37:34
//=============================================================================
//=============================================================================
// Made with LunaTea -- Haxe
//=============================================================================


// Generated by Haxe 4.1.3
/*:
@author LunaTechs - Kino
@plugindesc Allows you to display press start button before entering into your game's title 
menu <LunaPressStart>.

@target MV MZ

 @param Start Text
* @desc Text to display in the press start window.
* @default Press Start
*
* @param Font Size
* @desc Size of the start text font.
* @default 24
*
* @param Font Face
* @desc Your Font File Name this should be in your fonts folder.
* @default FiraSans-Ultra
*
* @param Fade Enable
* @desc Disable/Enable 'fade' (T/F).
* @default T
*
* @param Fade Speed
* @desc The speed at which to fade the text.
* @default 1
*
* @param Window Width
* @desc width of the window.
* @default 200
*
* @param Window Height
* @desc height of the window.
* @default 75
*
* @param Window X Position
* @desc The x position of the window on the title scene.
* @default 308
*
* @param Window Y Position 
* @desc The y position of the window on the title scene.
* @default 312

@help
This plugin allows you to have a press start button before the title screen information.

MIT License
Copyright (c) 2020 LunaTechsDev
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
*/
(function ($hx_exports, $global) { "use strict"
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {};
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""))
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0
		}
		this.r.m = this.r.exec(s)
		this.r.s = s
		return this.r.m != null;
	}
}
EReg.__name__ = true
class LunaPressStart {
	static main() {
		let _g = []
		let _g1 = 0
		let _g2 = $plugins
		while(_g1 < _g2.length) {
			let v = _g2[_g1]
			++_g1
			if(new EReg("<LunaPressStart>","ig").match(v.description)) {
				_g.push(v)
			}
		}
		let params = _g[0].parameters
		let tmp = parseInt(params["Font Size"],10)
		let tmp1 = new EReg("T","ig").match(params["Fade Enable"])
		let tmp2 = parseInt(params["Fade Speed"],10)
		let tmp3 = parseInt(params["Window Width"],10)
		let tmp4 = parseInt(params["Window Height"],10)
		let tmp5 = parseInt(params["Window X Position"],10)
		LunaPressStart.PressStartParams = { titleText : params["Start Text"], fontSize : tmp, enableFade : tmp1, fadeSpeed : tmp2, windowWidth : tmp3, windowHeight : tmp4, xPosition : tmp5, yPosition : parseInt(params["Window Y Position"],10), fontFace : params["Font Face"]}
		console.log("src/LunaPressStart.hx:55:",LunaPressStart.PressStartParams.fontFace)
		
//=============================================================================
// FontManager
//=============================================================================
      
		FontManager.load(LunaPressStart.pressStartFont,LunaPressStart.PressStartParams.fontFace)
		console.log("src/LunaPressStart.hx:58:",FontManager)
		
//=============================================================================
// Scene_Map
//=============================================================================
      
		let _SceneMapCreateAllWindows = Scene_Map.prototype["createAllWindows"] 
		Scene_Map.prototype.createAllWindows = function() {
			_SceneMapCreateAllWindows.call(this)
			this.createStartWindow()
		}
		Scene_Map.prototype["createStartWindow"] = function() {
			let SMap = this
			let PSParams1 = LunaPressStart.PressStartParams
			SMap._windowStart = new LTWindowStart(PSParams1.xPosition,PSParams1.yPosition,PSParams1.windowWidth,PSParams1.windowHeight)
			return SMap.addWindow(SMap._windowStart);
		}
		let _SceneMapIsBusy = Scene_Map.prototype["isBusy"] 
		Scene_Map.prototype["isBusy"] = function() {
			let SMap = this
			if(!SMap._windowStart.isOpen()) {
				return _SceneMapIsBusy.call(SMap);
			} else {
				return true;
			}
		}
		let _SceneMapUpdate = Scene_Map.prototype["update"] 
		Scene_Map.prototype["update"] = function() {
			let SMap = this
			_SceneMapUpdate.call(SMap)
			return SMap.processStart();
		}
		Scene_Map.prototype["processStart"] = function() {
			let SMap = this
			if(SMap._windowStart.isOpen() && (TouchInput.isPressed() || Input.isTriggered("ok"))) {
				SMap._windowStart.close()
				SMap._windowStart.deactivate()
			}
		}
		let _PlayerCanMove = Game_Player.prototype["canMove"] 
		Game_Player.prototype.canMove = function() {
			if(SceneManager._scene._windowStart != null && SceneManager._scene._windowStart.isOpen()) {
				return false;
			} else {
				return _PlayerCanMove.call(this);
			}
		}
	}
}
LunaPressStart.__name__ = true
class LTWindowStart extends Window_Base {
	constructor(x,y,width,height) {
		super(new Rectangle(x,y,width,height))
	}
	initialize(rect) {
		super.initialize(rect)
		this.setBackgroundType(2)
	}
	update() {
		super.update()
		if(LunaPressStart.PressStartParams.enableFade) {
			this.processFade()
			this.refresh()
		}
	}
	drawStartText() {
		let PSParams1 = LunaPressStart.PressStartParams
		this.contents.fontFace = LunaPressStart.pressStartFont
		this.contents.fontSize = PSParams1.fontSize
		this.contentsWidth()
		this.textWidth(PSParams1.titleText)
		this.drawText(PSParams1.titleText,0,0,this.contentsWidth(),"center")
		this.resetFontSettings()
	}
	processFade() {
		if(this._visible) {
			this.fadeOut()
		} else {
			this.fadeIn()
		}
	}
	refresh() {
		if(this.contents != null) {
			this.contents.clear()
			this.drawStartText()
		}
	}
	fadeOut() {
		this.contentsOpacity -= LunaPressStart.PressStartParams.fadeSpeed
		this.contentsOpacity = Math.min(Math.max(this.contentsOpacity,0),255)
		if(this.contentsOpacity == 0) {
			this._visible = false
		}
	}
	fadeIn() {
		this.contentsOpacity += LunaPressStart.PressStartParams.fadeSpeed;
		this.contentsOpacity = Math.min(Math.max(this.contentsOpacity,0),255)
		if(this.contentsOpacity == 255) {
			this._visible = true
		}
	}
}
LTWindowStart.__name__ = true
Math.__name__ = true
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0
		this.array = array
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true
class js_Boot {
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o)
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object"
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__]
				let n = e.__constructs__[o._hx_index]
				let con = e[n]
				if(con.__params__) {
					s = s + "\t"
					return n + "(" + ((function($this) {
						var $r
						let _g = []
						{
							let _g1 = 0
							let _g2 = con.__params__
							while(true) {
								if(!(_g1 < _g2.length)) {
									break
								}
								let p = _g2[_g1]
								_g1 = _g1 + 1
								_g.push(js_Boot.__string_rec(o[p],s))
							}
						}
						$r = _g
						return $r;
					}(this))).join(",") + ")"
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "["
				s += "\t";
				let _g = 0
				let _g1 = o.length
				while(_g < _g1) {
					let i = _g++
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr
			try {
				tostr = o.toString
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString()
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n"
			s += "\t";
			let hasp = o.hasOwnProperty != null
			let k = null
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1)
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
}
js_Boot.__name__ = true
class _$LTGlobals_$ {
}
_$LTGlobals_$.__name__ = true
class utils_Fn {
	static proto(obj) {
		return obj.prototype;
	}
	static updateProto(obj,fn) {
		return (fn)(obj.prototype);
	}
	static updateEntity(obj,fn) {
		return (fn)(obj);
	}
}
utils_Fn.__name__ = true
String.__name__ = true
Array.__name__ = true
js_Boot.__toStr = ({ }).toString
LunaPressStart.pressStartFont = "PressStartFont"
LunaPressStart.main()
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, {})
